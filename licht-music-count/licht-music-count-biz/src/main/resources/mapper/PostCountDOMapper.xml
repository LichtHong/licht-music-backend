<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="work.licht.music.count.domain.mapper.PostCountDOMapper">
  <resultMap id="BaseResultMap" type="work.licht.music.count.domain.model.PostCountDO">
    <id column="id" jdbcType="BIGINT" property="id" />
    <result column="post_id" jdbcType="BIGINT" property="postId" />
    <result column="like_total" jdbcType="BIGINT" property="likeTotal" />
    <result column="collect_total" jdbcType="BIGINT" property="collectTotal" />
    <result column="comment_total" jdbcType="BIGINT" property="commentTotal" />
  </resultMap>
  <sql id="Base_Column_List">
    id, post_id, like_total, collect_total, comment_total
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from t_post_count
    where id = #{id,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from t_post_count
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <insert id="insert" parameterType="work.licht.music.count.domain.model.PostCountDO">
    insert into t_post_count (id, post_id, like_total, 
      collect_total, comment_total)
    values (#{id,jdbcType=BIGINT}, #{postId,jdbcType=BIGINT}, #{likeTotal,jdbcType=BIGINT}, 
      #{collectTotal,jdbcType=BIGINT}, #{commentTotal,jdbcType=BIGINT})
  </insert>
  <insert id="insertSelective" parameterType="work.licht.music.count.domain.model.PostCountDO">
    insert into t_post_count
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="postId != null">
        post_id,
      </if>
      <if test="likeTotal != null">
        like_total,
      </if>
      <if test="collectTotal != null">
        collect_total,
      </if>
      <if test="commentTotal != null">
        comment_total,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=BIGINT},
      </if>
      <if test="postId != null">
        #{postId,jdbcType=BIGINT},
      </if>
      <if test="likeTotal != null">
        #{likeTotal,jdbcType=BIGINT},
      </if>
      <if test="collectTotal != null">
        #{collectTotal,jdbcType=BIGINT},
      </if>
      <if test="commentTotal != null">
        #{commentTotal,jdbcType=BIGINT},
      </if>
    </trim>
  </insert>
  <insert id="insertOrUpdateLikeTotalByPostId" parameterType="map">
    INSERT INTO t_post_count (post_id, like_total)
    VALUES (#{postId}, #{count})
    ON DUPLICATE KEY UPDATE like_total = like_total + (#{count});
  </insert>=
  <insert id="insertOrUpdateCollectTotalByPostId" parameterType="map">
    INSERT INTO t_post_count (post_id, collect_total)
    VALUES (#{postId}, #{count})
    ON DUPLICATE KEY UPDATE collect_total = collect_total + (#{count});
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="work.licht.music.count.domain.model.PostCountDO">
    update t_post_count
    <set>
      <if test="postId != null">
        post_id = #{postId,jdbcType=BIGINT},
      </if>
      <if test="likeTotal != null">
        like_total = #{likeTotal,jdbcType=BIGINT},
      </if>
      <if test="collectTotal != null">
        collect_total = #{collectTotal,jdbcType=BIGINT},
      </if>
      <if test="commentTotal != null">
        comment_total = #{commentTotal,jdbcType=BIGINT},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="work.licht.music.count.domain.model.PostCountDO">
    update t_post_count
    set post_id = #{postId,jdbcType=BIGINT},
      like_total = #{likeTotal,jdbcType=BIGINT},
      collect_total = #{collectTotal,jdbcType=BIGINT},
      comment_total = #{commentTotal,jdbcType=BIGINT}
    where id = #{id,jdbcType=BIGINT}
  </update>
</mapper>